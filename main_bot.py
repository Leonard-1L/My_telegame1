import time

import telebot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from os import getenv
from dotenv import load_dotenv
from DATA_changes import *

load_dotenv()
TOKEN = getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

WORLD = load_world()
users_data = load_users_data()


@bot.message_handler(commands=['help'])
def help_user(message: Message):
    bot.send_message(message.from_user.id,
                     "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ, —á—Ç–æ —Å –±–æ—Ç–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, —Ç–æ –ø–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /restart. –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ @Leoprofi")


@bot.message_handler(commands=['start', 'restart'])
def start_programm(message: Message):
    markup = ReplyKeyboardMarkup()
    user_id = str(message.from_user.id)
    with open("Media/–§–æ–Ω–æ–≤–∞—è –º—É–∑–∞.mp3", "rb") as file:
        bot.send_audio(user_id, audio=file)
        bot.send_message(user_id, "–≠—Ç–æ —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∞—É—à–Ω–∏–∫–∏")
    if user_id not in users_data:
        markup.add(KeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
        users_data[user_id] = {
            "username": message.from_user.username,
            "location_in_world": "–ù–∞—á–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è",
            "user_items": [],
            "user_achievements": [],
            "user_restart_spaming": 0
        }
        savefile(users_data)
        bot.send_message(
            chat_id=user_id,
            text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –≠—Ç–∞ –º–µ–ª–∫–∞—è –∏–≥—Ä–∞ —Ö–æ—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ –≤–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä! –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∞—É—à–Ω–∏–∫–∏ (–µ—Å–ª–∏ –Ω–∞ –∫–æ–º–ø–µ, —Ç–æ –æ—Ç–∫—Ä–æ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ).\n"
                 "–ù—É —á—Ç–æ, –Ω–∞—á–∏–Ω–∞–µ–º?)",
            reply_markup=markup,
        )
        return
    elif user_id in users_data and users_data[user_id]['location_in_world'] not in ["–ù–∞—á–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è", "–°–¥–∞—Ç—å—Å—è"]:
        markup.add(KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"), KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"))

        text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.username}! –•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–≤–µ—Å—Ç–∞?"
        bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=markup,
        )
        return
    else:
        markup.add(KeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
        text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.username}! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ –∏–≥—Ä—É?"
        bot.send_message(
            chat_id=user_id,
            text=text,
            reply_markup=markup,
        )
        return


def filter_continues(message):
    bottom = ["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"]
    return message.text in bottom


def register_new_user(message: Message):
    users_data[str(message.from_user.id)] = {
        "username": message.from_user.username,
        "location_in_world": "–ù–∞—á–∞–ª—å–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è",
        "user_items": []
    }


@bot.message_handler(func=filter_continues)
def continue_solution(message):
    user_id = str(message.from_user.id)
    send_user_location_bottoms(user_id)


def send_user_location_bottoms(user_id):
    user_location = users_data[user_id]["location_in_world"]
    image = WORLD[user_location]['img']
    bot.send_photo(
        chat_id=user_id,
        photo=open(f"Media/{image}", "rb")
    )
    markup = make_locations_markup(ways=WORLD[user_location]['ways'])
    description = WORLD[user_location]['description']
    bot.send_message(
        chat_id=user_id,
        text=f'<i>{description}</i>',
        reply_markup=markup,
        parse_mode='HTML'
    )


def make_locations_markup(ways):
    markup = ReplyKeyboardMarkup()
    for bottom in ways:
        markup.add(bottom)
    return markup


@bot.message_handler(func=lambda message: message.text == "1606")
def sixteen_six(message: Message):
    markup = InlineKeyboardMarkup()
    button = InlineKeyboardButton('–î–∞–≤–∞–π —É–∑–Ω–∞–µ–º!', url='https://youtu.be/dQw4w9WgXcQ?si=MxA6xXlucyrelY9y')
    markup.add(button)
    bot.send_message(message.from_user.id, '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?)', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ['–ü–æ—Ä–∞–∂–µ–Ω–∏–µ', "–ü–æ–±–µ–¥–∞"])
def win_wasted(message: Message):
    if message.text == "–ü–æ–±–µ–¥–∞":
        bot.send_message(message.from_user.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâüéä")
    elif message.text == "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ":
        bot.send_message(message.from_user.id,
                         "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ù–æ –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø—Ä–æ–π—Ç–∏ –∏–≥—Ä—É –µ—â–µ —Ä–∞–∑!")
    bot.send_message(message.from_user.id, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≥–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /restart")


@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
def restart(message: Message):
    user_id = str(message.from_user.id)
    register_new_user(message)
    savefile(users_data)
    send_user_location_bottoms(user_id)


@bot.message_handler(commands=["your_location"])
def send_user_location(message: Message):
    user_id = str(message.from_user.id)
    if user_id in users_data:
        location = users_data[user_id]['location_in_world']
        bot.send_message(user_id, f"–í—ã {WORLD[location]["guide"]}.")
    else:
        start_programm(message)


@bot.message_handler(func=lambda message: True)
def handle_answer(message):
    user_id = str(message.from_user.id)
    if user_id not in users_data:
        return start_programm(message)
    user_location = users_data[user_id]['location_in_world']
    user_items = users_data[user_id]['user_items']

    if message.text in WORLD[user_location]['ways']:

        if message.text == "–ó–∞–ø–µ—Ä—Ç–∞—è –¥–≤–µ—Ä—å" and "–°—Ç–∞—Ä–∏–Ω–Ω—ã–π –∫–ª—é—á" not in user_items:
            bot.send_message(user_id, "<b>–î–≤–µ—Ä—å –Ω–∞ –∑–∞–º–∫–µ. –í–∞–º –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ –∫–ª—é—á–∏–∫</b>", parse_mode='HTML')
            return
        elif message.text == '–ó–∞–ø–µ—Ä—Ç–∞—è –¥–≤–µ—Ä—å' and "–°—Ç–∞—Ä–∏–Ω–Ω—ã–π –∫–ª—é—á" in user_items:
            users_data[user_id]['location_in_world'] = '–ó–∞–ø–µ—Ä—Ç–∞—è –¥–≤–µ—Ä—å'
            bot.send_message(user_id, "–ö–ª—é—á –ø–æ–¥–æ—à—ë–ª!")
            time.sleep(2)

        users_data[user_id]['location_in_world'] = message.text

        if message.text == "–ë–∞—Ä–Ω–∞—è —Å—Ç–æ–π–∫–∞" and '–°—Ç–∞—Ä–∏–Ω–Ω—ã–π –∫–ª—é—á' not in user_items:
            bot.send_message(user_id, "–í—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ —Å—Ç–∞—Ä–∏–Ω–Ω—ã–π –∫–ª—é—á!!!")
            users_data[user_id]['user_items'].append("–°—Ç–∞—Ä–∏–Ω–Ω—ã–π –∫–ª—é—á")
            time.sleep(1)
        send_user_location_bottoms(user_id)
    else:
        bot.send_message(
            user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:"
        )
        savefile(users_data)


savefile(users_data)

bot.polling(none_stop=True)
